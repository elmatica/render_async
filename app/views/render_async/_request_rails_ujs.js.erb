if (window.Rails) {
  (function() {
    <% if turbolinks %>
    if (document.documentElement.hasAttribute("data-turbolinks-preview")) {
      return;
    }
    <% end %>
    function createEvent(name, container) {
      var event = undefined;
      if (typeof(Event) === 'function') {
        event = new Event(name);
      } else {
        event = document.createEvent('Event');
        event.initEvent(name, true, true);
      }
      event.container = container
      return event;
    }

    function _runAfterDocumentLoaded(callback) {
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        // Handle a case where nested partials get loaded after the document loads
        callback();
      } else {
        <% if turbolinks %>
        $(document).one('turbolinks:load', callback);
        <% else %>
        $(document).ready(callback);
        <% end %>
      }
    }

    function _makeRequest(currentRetryCount) {
      Rails.ajax({
        url: '<%= path.html_safe %>',
        type: '<%= method %>',
        data: "<%= escape_javascript(data.to_s.html_safe) %>",
        success: onSuccess,
        error: onError
      });

      function onSuccess(response, status, xmlRequest){
        var container = $("#<%= container_id %>");
        const contentTypeJS = xmlRequest.getResponseHeader("Content-Type").includes("text/javascript");

        <% if interval %>
          if(!contentTypeJS){
            container.empty();
            container.append(response);
          }
        <% else %>
          if(!contentTypeJS){
            container.replaceWith(response);
          }
        <% end %>

        var loadEvent = createEvent('render_async_load', container);
        document.dispatchEvent(loadEvent);

        <% if event_name.present? %>
          var event = createEvent("<%= event_name %>", container)
          document.dispatchEvent(event);
        <% end %>
     }

  function onError(response){
        var skipErrorMessage = false;
        <% if retry_count > 0 %>
        skipErrorMessage = retry(currentRetryCount)
        <% end %>

        if (skipErrorMessage) return;

        var container = $("#<%= container_id %>");
        container.replaceWith("<%= error_message.try(:html_safe) %>");

        var errorEvent = createEvent('render_async_error', container);
        errorEvent.container = container;
        document.dispatchEvent(errorEvent);

        <% if error_event_name.present? %>
          var event = createEvent("<%= error_event_name %>", container)
          document.dispatchEvent(event);
        <% end %>
     }
    };

    <% if retry_count > 0 %>
    function retry(currentRetryCount) {
      if (typeof(currentRetryCount) === 'number') {
        if (currentRetryCount >= <%= retry_count %>)
          return false;

        _makeRequest(currentRetryCount + 1);
        return true;
      }

      _makeRequest(1);
      return true;
    }
    <% end %>

    var _renderAsyncFunction = _makeRequest;

    var _interval;
    <% if interval %>
    var _renderAsyncFunction = function() {
      _makeRequest();
      _interval = setInterval(_makeRequest, <%= interval %>);
    }

    <% if turbolinks %>
    $(document).one('turbolinks:visit', function() {
      if (typeof(_interval) === 'number') {
        clearInterval(_interval)
        _interval = undefined;
      }
    });
    <% end %>
    <% end %>

    <% if toggle %>
    function _setUpToggle() {
      $(document).<%= toggle[:once] ? 'one' : 'on' %>('<%= toggle[:event] || 'click' %>', '<%= toggle[:selector] %>', function(event) {
        if (typeof(_interval) === 'number') {
          clearInterval(_interval);
          _interval = undefined;
        } else {
          _renderAsyncFunction();
        }
      });
    }

    _runAfterDocumentLoaded(_setUpToggle);
    <% elsif !toggle %>
    _runAfterDocumentLoaded(_renderAsyncFunction)
    <% end %>
  }());
} else {
  console.warn("Looks like you've enabled rails_ujs for render_async, but Rails is not defined on the window object");
};
